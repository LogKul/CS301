
   SAMPLE FINAL EXAM

   1.
      a. O(N), factorial performs N operations.
        
      b. O(N logN)
        
      c. O(N^2), the function terminates when an element of one list is not in another,
         so worst-case runtime is if both lists have the same elements.
        
      d. O(N logN), while loop runs logN time, for loop runs N/2 times.

   2.
      a.                 9
                       /   \
                      4     16
                     /  \    /
                    1    7  13
                       /   /  \
                      5   11   14
        
      b. Some of the children of 16 are smaller than 16, but larger than 9 (11, 13, 14).
         The entire tree would need to be recreated in order for the rule to not be broken,
         because 13 would be the "larger" child of 16, when both 4 and 13 are smaller than
         16, so 13 must not be a direct child of 16, which violates the binary condition.
        
      c. If we were to rebuild the binary tree from the ground up using the rest of the
         elements left in the tree, the median(s) would be the best choice to replace the
         root because then our tree would be the most balanced, and the most efficient.
         The medians in this case are 7 and 11.

   3. def bubblesort(alist)
         for i in range(0, len(alist)):
            for j in range(1, len(alist)-i):
               if alist[j-1] > alist[j]:
                  temp = alist[j]
                  alist[j] = alist[j-1]
                  alist[j-1] = temp
    
   4.
      a. LMAO I'm not drawing that

      b. This is a directed graph because of the last two classes: 375 and 495, which have
         multiple parents. If this were a tree, each element could only have one parent.
    
   5. 
      a. LMAO I'm not drawing a merge sort. (I could tho LMFAOOOOOOOOOOO)

      b. Same LMFAOEOEOEOOEOE
    
   6.
      a. def put(self, item):
            og_hash = self.hashfunction(item)
            if self.slots[og_hash] == None:
               self.slots[og_hash] = item
            else:
               curr_hash = rehash(og_hash)
               while curr_hash == None and currhash != og_hash:
                  curr_hash = rehash(curr_hash)
               if curr_hash == og_hash:
                  raise Exception("ERROR")
               else:
                  self.slots[curr_hash] = item
        
      b. 0  1  2  3  4  5  6  7  8  9  10 11 12
         26       23       6  7     20 10 
    
   7.
      a. A, B, C, D, G, E

      b. A, E, B, G, C, d
    
   8. Not drawing a stack frame diagram LMAO

   9. def bfs(self, startingnode, item):
         for child in startingnode.children:
            if child.isSeen() == False:
               child.makeseen()
               if child.getData == item:
                  return True
         for child in startingnode.children:
            found = bfs(child, item)
            if found == True:
               return True
         return False
   
   10.
      a. def Dups(alist, k):
            for element in alist:
               count = 0
               for check_element in alist:
                  if check_element == element:
                     count += 1
               if count == k:
                  return True
            return False
         
      b. def sDups(slist, k):
            curr_element = slist[0]
            count = 0
            for element in alist:
               if element == curr_element:
                  count += 1
               else:
                  if count == k:
                     return True
                  count = 1
                  curr_element = element
            if count == k:
               return True
            else:
               return False
         
      c. We could check an unsorted list by storing each element in a dictionary
         along with that element's current count. This would work because we would
         only iterate through the list once, and adding/updating elements in a
         dictionary is O(1), so we would end up with a lot of constant-time checks
         for every element in our list, so we get O(N).
   

============================================================================================
   FINAL EXAM

   1. 
      a. O(logN) because we perform constant actions for every logN actions, we are constantly dividing by 2.

      b. O(N^2) because the .insert() function has O(N) runtime when inserting at the beginning of a list, while
         the .pop() function has constant runtime without specifying index, while the for loop has O(N) runtime.

      c. O(N^2 logN) because for every N character in a word, we perform N logN actions, because Python's sorting
         function runs in N logN time, giving us O(N^2 logN). Everything else is additive, so they don't matter.
   
   2.
      a. I know how to do this, not writing it out in VSCode again

      b. You would iterate over the list, recording each node, find the middle node value, and rebuild the tree
         with that node as the root.
   
   3.
      a. [22, 11, 1, 5, 3, 22] Merge Sort
         [22, 11, 1], [5, 3, 22]
         [22], [11, 1], [5], [3, 22]
         [22], [11], [1], [5], [3], [22]
         [22], [1, 11], [5], [3, 22]
         [1, 11, 22], [3, 5, 22]
         [1, 3, 5, 11, 22, 22]
      
      b. [22, 11, 1, 5, 3, 22] Insertion Sort
         [11, 1, 5, 3, 22, 22] (In-Place)
         [1, 5, 3, 11, 22, 22]
         [1, 3, 5, 11, 22, 22]
   
   4. def selectionsort(alist):
         for i in range(0, len(alist)):
            min = i
            for j in range(i, len(alist)):
               if alist[j] < alist[min]:
                  min = j
            temp = alist[i]
            alist[i] = alist[min]
            alist[min] = temp
   
   5.
      a. Not drawing this LMAO

      b. This is a tree because happyEdge(4, 8) and happyEdge(4, 9) both return true, which
         means that each node has the possibility to have 2 children, while each child only has the
         possibility to come from one parent.
   
   6.
      a. def put(self, item):
            og_hash = self.hashfunction(item)
            if self.slots[og_hash] == None:
               self.slots[og_hash] = item
            else:
               curr_hash = rehash(og_hash)
               while curr_hash == None and currhash != og_hash:
                  curr_hash = rehash(curr_hash)
               if curr_hash == og_hash:
                  raise Exception("ERROR")
               else:
                  self.slots[curr_hash] = item
      
      b. 0  1  2  3  4  5  6  7  8  9  10
         16 11    33       6     28
   
   7.
      a. DFS Order: a, b, e, g, j, h, i, d, f, C

      b. BFS Order: a, b, c, e, d, g, i, j, h, factorial
   
   8. Not drawing a stack frame diagram

   9. def bfs(self, item):
         node_queue = [self.root]
         if self.root.getData() == item:
            return True
         while len(node_queue) > 0:
            curr_node = node_queue.pop(0)
            
            for child in curr_node.getChildren():
               if child not in node_queue:
                  node_queue.append(child)
                  if child.getData() == item:
                     return True
         
         return False
   
   10.
      a. O(N)

      b. (5, 2)

      c. This algorithm only checks adjacent pairs, not each element in the list against 
         every other element.

      d. def pairsearch(S, t):
            for i in range(len(S)):
               for j in range(len(S)):
                  if i != j:
                     if S[i] + S[j] == t:
                        return (S[i], S[j])
            return False

